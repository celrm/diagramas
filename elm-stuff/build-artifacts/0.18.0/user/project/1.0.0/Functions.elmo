var _user$project$Functions$diagramas = function (model) {
	var sigma0 = A2(
		_elm_lang$core$Maybe$withDefault,
		0,
		_elm_lang$core$List$head(model.serie));
	var l = _elm_lang$core$List$length(model.serie);
	var fl = _elm_lang$core$Basics$toFloat(l);
	var theta = function (x) {
		return _elm_lang$core$Basics$turns(
			((_elm_lang$core$Basics$toFloat(x) / fl) + 0.75) + (model.rotar ? (_elm_lang$core$Basics$negate(
				_elm_lang$core$Basics$toFloat(sigma0)) / fl) : 0));
	};
	var convertirEnCoordCart = F2(
		function (radio, lista) {
			return A2(
				_elm_lang$core$List$map,
				_elm_lang$core$Basics$fromPolar,
				A3(
					_elm_lang$core$List$map2,
					F2(
						function (v0, v1) {
							return {ctor: '_Tuple2', _0: v0, _1: v1};
						}),
					A2(
						_elm_lang$core$List$repeat,
						_elm_lang$core$List$length(lista),
						radio * fl),
					A2(_elm_lang$core$List$map, theta, lista)));
		});
	var small = (_elm_lang$core$Native_Utils.cmp(l, 8) < 0) ? ((((fl * fl) / 8.0) - (2 * fl)) + 12) : 4.0;
	return A2(
		_elm_lang$svg$Svg$svg,
		{
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$version('1.1'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$x('0'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$y('0'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$viewBox(
							A2(
								_elm_lang$core$Basics_ops['++'],
								'-',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$Basics$toString(4 * l),
									A2(
										_elm_lang$core$Basics_ops['++'],
										' -',
										A2(
											_elm_lang$core$Basics_ops['++'],
											_elm_lang$core$Basics$toString(small * fl),
											A2(
												_elm_lang$core$Basics_ops['++'],
												' ',
												A2(
													_elm_lang$core$Basics_ops['++'],
													_elm_lang$core$Basics$toString(8 * l),
													A2(
														_elm_lang$core$Basics_ops['++'],
														' ',
														_elm_lang$core$Basics$toString((2 * small) * fl))))))))),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$width('100%'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$height(
									_elm_lang$core$Basics$toString(
										90 * A2(_elm_lang$core$Basics$logBase, 2, fl + 1))),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}
		},
		A2(
			_elm_lang$core$Basics_ops['++'],
			A2(
				_elm_lang$core$List$indexedMap,
				F2(
					function (i, coord) {
						return A2(
							_elm_lang$svg$Svg$text_,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$x(
									_elm_lang$core$Basics$toString(
										_elm_lang$core$Tuple$first(coord))),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$y(
										_elm_lang$core$Basics$toString(
											_elm_lang$core$Tuple$second(coord) + 3)),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fontFamily('calibri'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fontSize('12'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$textAnchor('middle'),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							},
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg$text(
									_elm_lang$core$Basics$toString(i)),
								_1: {ctor: '[]'}
							});
					}),
				A2(
					convertirEnCoordCart,
					3.0,
					A2(_elm_lang$core$List$range, 0, l - 1))),
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$polyline,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$points(
							A3(
								_elm_lang$core$List$foldl,
								F2(
									function (coord, str) {
										return A2(
											_elm_lang$core$Basics_ops['++'],
											str,
											A2(
												_elm_lang$core$Basics_ops['++'],
												' ',
												A2(
													_elm_lang$core$Basics_ops['++'],
													_elm_lang$core$Basics$toString(
														_elm_lang$core$Tuple$first(coord)),
													A2(
														_elm_lang$core$Basics_ops['++'],
														',',
														_elm_lang$core$Basics$toString(
															_elm_lang$core$Tuple$second(coord))))));
									}),
								'',
								A2(
									convertirEnCoordCart,
									3.0 - (6 / fl),
									model.ultimo ? A2(
										_elm_lang$core$Basics_ops['++'],
										model.serie,
										{
											ctor: '::',
											_0: A2(
												_elm_lang$core$Maybe$withDefault,
												0,
												_elm_lang$core$List$head(model.serie)),
											_1: {ctor: '[]'}
										}) : model.serie))),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$style('fill:none;stroke:black;stroke-width:0.5'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$markerStart('url(#flechita)'),
								_1: {ctor: '[]'}
							}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$defs,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$marker,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$id('flechita'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$markerWidth('100'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$markerHeight('100'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$refX('0'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$refY(
														_elm_lang$core$Basics$toString(
															9 * A2(_elm_lang$core$Basics$logBase, 10, fl))),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$orient('auto'),
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$path,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$d(
												A2(
													_elm_lang$core$Basics_ops['++'],
													'M',
													A2(
														_elm_lang$core$Basics_ops['++'],
														_elm_lang$core$Basics$toString(
															3 * A2(_elm_lang$core$Basics$logBase, 10, fl)),
														A2(
															_elm_lang$core$Basics_ops['++'],
															',',
															A2(
																_elm_lang$core$Basics_ops['++'],
																_elm_lang$core$Basics$toString(
																	3 * A2(_elm_lang$core$Basics$logBase, 10, fl)),
																A2(
																	_elm_lang$core$Basics_ops['++'],
																	' L',
																	A2(
																		_elm_lang$core$Basics_ops['++'],
																		_elm_lang$core$Basics$toString(
																			3 * A2(_elm_lang$core$Basics$logBase, 10, fl)),
																		A2(
																			_elm_lang$core$Basics_ops['++'],
																			',',
																			A2(
																				_elm_lang$core$Basics_ops['++'],
																				_elm_lang$core$Basics$toString(
																					16.5 * A2(_elm_lang$core$Basics$logBase, 10, fl)),
																				A2(
																					_elm_lang$core$Basics_ops['++'],
																					' L',
																					A2(
																						_elm_lang$core$Basics_ops['++'],
																						_elm_lang$core$Basics$toString(
																							15 * A2(_elm_lang$core$Basics$logBase, 10, fl)),
																						A2(
																							_elm_lang$core$Basics_ops['++'],
																							',',
																							A2(
																								_elm_lang$core$Basics_ops['++'],
																								_elm_lang$core$Basics$toString(
																									9 * A2(_elm_lang$core$Basics$logBase, 10, fl)),
																								A2(
																									_elm_lang$core$Basics_ops['++'],
																									' L',
																									A2(
																										_elm_lang$core$Basics_ops['++'],
																										_elm_lang$core$Basics$toString(
																											3 * A2(_elm_lang$core$Basics$logBase, 10, fl)),
																										A2(
																											_elm_lang$core$Basics_ops['++'],
																											',',
																											_elm_lang$core$Basics$toString(
																												3 * A2(_elm_lang$core$Basics$logBase, 10, fl)))))))))))))))))),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$style('fill:#000000;'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$scale('3'),
													_1: {ctor: '[]'}
												}
											}
										},
										{ctor: '[]'}),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			}));
};
